#!/usr/bin/env python
"""Primary module of navigation package. Currently, nav accepts a goalPose and then generates an environment configuration 
file in the format accepted by SBPL. It uses default values that have no relationship to the actual course. It will then 
call the C++ SBPL code using a subprocess, parse the generated solution file and issue commands to comm.

As this develops, it will eventually accept a goalPose from planner, request a currentPose from localizer, then call
SBPL code (C++ made usable in Python by some method) and pass the configuration params. No file will be created and
no subprocess will spawn. The solution generated by SBPL will be returned to nav (not written to a file), and will then
be parsed and handed off to comm. Some additional logic involving issuing steps of the solution to comm, getting results,
checking for the amount of error, notifying localizer, maybe re-planning, and then issuing the next step will need to
be added."""

import comm.serial_interface as comm
from subprocess import call
import logging
import logging.config

DISCRETIZATION = 15 # Cells
OBSTHRESH = 1
COST_INSCRIBED_THRESH = 1
COST_POSSIBLY_CIRCUMSCRIBED_THRESH = 0
CELLSIZE = 0.025 # Meters
NOMINALVEL = 1.0 # Meters per second
TIMETOTURN45DEGSINPLACE = 2.0 # Seconds
ENVIROMENT = \
"""0 0 0 0 0 0 1 1 0 0 0 0 0 0 0  
0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 
0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
1 1 1 1 0 0 0 0 0 0 0 1 0 0 0 
1 1 1 1 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 """

def run(bot_loc, blocks, zones, corners, course_map, waypoints):
  """Function that accepts initial data from controller and kicks off nav. Will eventually involve instaniating an class.

  :param bot_loc: initial location of the bot
  :param blocks: block data
  :param zones: zone data
  :param corners: corner data
  :param course_map: map of course
  :param waypoints: waypoint data
  """
  logging.config.fileConfig("logging.conf")
  logger = logging.getLogger(__name__)
  logger.debug("Logger setup in nav")

def moveForward(distance, speed):
  """Very stupid function for moving forward. Goal is to get started with message passing between planner and comm.

  :param distance: distance to move forward
  :param speed: speed to move forward
  """
  si = comm.SerialInterface()
  actual_move = si.botMove(distance, speed)
  return actual_move

def genEnvFile(currentPose = {'theta': 0, 'x': 0.11, 'y': 0.11}, goalPose = {'theta': 0, 'x': 0.35, 'y': 0.3}):
  """Builds a file suitable as input for SBPL. Eventually, params will be passed directly to SBPL, not written out.

  :param goalPose: X, Y and theta of the desired bot location
  """
  # Open enviroment file for writing
  envFile = open("navigation/envFile.cfg", "w")

  # Write configuration to environment file
  envFile.write("discretization(cells): " + str(DISCRETIZATION) + " " + str(DISCRETIZATION) + "\n"
    + "obsthresh: " + str(OBSTHRESH) + "\n"
    + "cost_inscribed_thresh: " + str(COST_INSCRIBED_THRESH) + "\n"
    + "cost_possibly_circumscribed_thresh: " + str(COST_POSSIBLY_CIRCUMSCRIBED_THRESH) + "\n"
    + "cellsize(meters): " + str(CELLSIZE) + "\n"
    + "nominalvel(mpersecs): " + str(NOMINALVEL) + "\n"
    + "timetoturn45degsinplace(secs): " + str(TIMETOTURN45DEGSINPLACE) + "\n"
    + "start(meters,rads): " + str(currentPose["x"]) + " " + str(currentPose["y"]) + " " + str(currentPose["theta"]) + "\n"
    + "end(meters,rads): " + str(goalPose["x"]) + " " + str(goalPose["y"]) + " " + str(goalPose["theta"]) + "\n"
    + "environment:" + "\n" + str(ENVIROMENT))

  # Close environment file
  envFile.close()
  
def moveTo(goalPose):
  """Accepts a pose from planner that nav will attempt to move the bot to.

  :param goalPose: dict with keys x, y and theta of the desired bot location
  """
  logger.info("Received new goalPose:", goalPose)

  # TODO Get current pose from localizer

  # Create environment fire for SBPL. TODO Replace this will direct call to SBPL C++, made to work in Python.
  genEnvFile()

  # TODO Call SBPL
